# BlockDrawer name
bc.angle=angle
bc.base=base
bc.condition=condition
bc.else=else
bc.exponent=exponent
bc.from=from
bc.level=level
bc.max=max
bc.microseconds=microseconds
bc.milliseconds=milliseconds
# BlockConnector label
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.to=to
bc.value=value
bc.variable=variable
bc.type_int=int
bc.type_float=float
bc.type_string=string
bc.type_boolean=boolean
bc.number=number
bc.frequency=frequency
bc.do=do
bc.device_address=device address
bc.register_address=register address
bd.control=Control
bd.dfrobot=DFRobot
bd.number=Number/Constants


bm.left=left
bm.right=right
bc.times=times
bg.couple=,
bd.operators=Operators
bd.pins=Pins
bd.seeedstudio=Seeedstudio Grove
bd.tinkerkit=TinkerKit Blocks
bd.utilities=Utilities
# BlockGenus initlabel
bg.Tinker_Accmeter=Accelerometer
bg.Tinker_Button=Button
bg.Tinker_Hall=Hall
bg.Tinker_I0=I0
bg.Tinker_I1=I1
bg.Tinker_I2=I2
bg.Tinker_I3=I3
bg.Tinker_I4=I4
bg.Tinker_I5=I5
bg.Tinker_LDR=LDR
bg.Tinker_LED=LED
bg.Tinker_LED_pwm=LED
bg.Tinker_LinearPotentiometer=LinearPotentiometer
bg.Tinker_Mosfet=Mosfet
bg.Tinker_Mosfet_pwm=Mosfet
bg.Tinker_O0=O0
bg.Tinker_O1=O1
bg.Tinker_O2=O2
bg.Tinker_O3=O3
bg.Tinker_O4=O4
bg.Tinker_O5=O5
bg.Tinker_Relay=Relay
bg.Tinker_RotaryPotentiometer=RotaryPotentiometer
bg.Tinker_Servo=Servo
bg.Tinker_Thermistor=Thermistor
bg.Tinker_Tilt=Tilt
bg.Tinker_Touch=Touch
bg.abs=abs
bg.addition=+
bg.and=and
bg.cos=cos
bg.delay=delay
bg.delay_microseconds=delayMicroseconds
bg.df_360_degree_rotation_motor=360 degree rotation motor
bg.df_adjustable_infrared_sensor_switch=Adjustable Infrared Sensor Switch
bg.df_analog_ambient_light_sensor=Analog Ambient Light Sensor
bg.df_analog_gas_sensor=Analog Gas Sensor
bg.df_analog_grayscale_sensor=Analog Grayscale Senor
bg.df_analog_rotation_sensor_v1=Analog Rotation Sensor V1
bg.df_analog_rotation_sensor_v2=Analog Rotation Sensor V2
bg.df_analog_sound_sensor=Analog Sound Sensor
bg.df_capacitive_touch_sensor=Capacitive Touch Sensor
bg.df_digital_infrared_motion_sensor=Digital Infrared Motion Sensor
bg.df_digital_ir_receiver_module=Digital IR Receiver Module
bg.df_digital_push_button=Digital Push Button
bg.df_digital_viberation_sensor=Digital Vibration Sensor
bg.df_flame_sensor=Flame Sensor
bg.df_joystick_module_button=JoyStick Module Button
bg.df_joystick_module_x=Joystick Module (Axis-X)
bg.df_joystick_module_y=Joystick Module (Axis-Y)
bg.df_led=LED Module
bg.df_led_pwm=LED with brightness
bg.df_line_tracking_sensor=Line Tracking Sensor
bg.df_mma7260_x=Triple Axis Accelerometer MMA7260 (Axis-X)
bg.df_mma7260_y=Triple Axis Accelerometer MMA7260 (Axis-Y)
bg.df_mma7260_z=Triple Axis Accelerometer MMA7260 (Axis-Z)
bg.df_piranha_led=piranha LED Module
bg.df_piranha_led_pwm=piranha LED with brightness
bg.df_pizeo_disk_vibration_sensor=Piezo Disk Vibration Sensor
bg.df_relay=Relay
bg.df_servo=DFRobot Servo
bg.df_temperature_sensor=Temperature Sensor
bg.df_buzzer=DFRobot Buzzer
bg.df_buzzer_tone=DFRobot Buzzer
bg.df_buzzer_tone_delay=DFRobot Buzzer

bg.df_digital_tilt_sensor=DFRobot Digital Tilt Sensor
bg.df_digital_magnetic_sensor=DFRobot Digital Magnetic Sensor
bg.df_analog_co_sensor=DFRobot Analog Carbon Monoxide Sensor
bg.df_analog_voltage_divider=DFRobot Analog Voltage Divider
bg.df_analog_mma7361_x=X-Asix of DFRobot Accelerometer
bg.df_analog_mma7361_y=Y-Asix of DFRobot Accelerometer
bg.df_analog_mma7361_z=Z-Asix of DFRobot Accelerometer
bg.df_analog_gp2y0a21=DFRobot Sharp GP2Y0A21 Distance Sensor
bg.df_analog_moisture=DFRobot Soil Moisture Sensor


bg.addText=+
bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=\u00f7
bg.equal==
bg.false=FALSE
bg.glue_sb=glue
bg.glue_sn=glue
bg.greater=>
bg.greater_equal=>=
bg.initData=init data
bg.if=if
bg.ifelse=if/else
bg.less=<
bg.less_equal=<=
bg.loop=loop
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.map=map
bg.map_common=map [0, 1024] to [0, 255]
bg.max=max
bg.message=message
bg.millis=millis
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=!=
bg.number=1
bg.number-float=1.0

bg.or=or
bg.pin-read-analog=analog pin
bg.pin-read-digital=digital pin
bg.pin-read-analog2=tixou

bg.pin-write-analog=set analog pin
bg.pin-write-digital=set digital pin
bg.pow=power
bg.random=random
bg.repeat_times=repeat
bg.seeed_joystick=Grove Thumb Joystick
bg.seeed_joystick_button=Grove Thumb Joystick Button
bg.serial_println=Serial println
bg.serial_printlnNumber=Serial println number
bg.servo=Servo

bg.robot=robot
bg.declare_variable_digital=declare a new boolean
bg.string=string
bg.variable_string=string
bg.declare_variable_string=declare new string
bg.setter_variable_string=set string
bg.setter_variable_digital=set digital var
bg.setter_variable_number=set value to variable

bg.declare_variable_number_int=declare number variable
bg.declare_variable_number_float=declare float number variable

bg.unmber_to_string=123 -> "123"
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.tan=tan
bg.true=TRUE
bg.ultrasonic=ultrasonic
bg.variable_digital=digital var name
bg.variable_number=number var name

bg.while=while
bg.wire_isread=I2C read ok?
bg.wire_read=I2C Read
bg.wire_write=I2C Write
bg.tone=tone
bg.tone_time=tone
bg.no_tone=noTone
bg.xcj_motor_backward=motor shield <br> backward
bg.xcj_motor_forward=motor shield <br> forward
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite
ardublock.file.suffix=ArduBlock Program File(*.abp)
ardublock.file.suffix=ArduBlock Program File(*.abp)

ardublock.ui.save=Save
ardublock.ui.load=load
ardublock.ui.upload=Upload
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference

ardublock.translator.exception.subroutineNameDuplicated=tow or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=socket null
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=ArduBlock program changed, do you want to save?
message.content.overwrite=Do you want overwrite existed file?
message.file_not_found=File Not Found or Permission Denied

bd.planetuino=robot planetuino
bd.planetLoopAndFunction=boucles et methodes
bd.planetOperations=operations
bd.planetRobotSensor=capteurs du robot
bd.planetrobotMaker=actionneurs du robot
bd.planetVariables=variables
bd.planetTests=tests


bg.robotCreateNew=create a new robot


bg.robotStop=make robot stops
bg.robotGoForeward=make robot goes forward
bg.robotGoBackward=make robot goes backward
bg.robotLeftEye=get robot's left eye value
bg.robotRightEye=get robot's right eye value
bg.robotSwitchOff=switch of the robot
bg.robotLeftButton=get robot's left button value
bg.robotRightButton=get robot's right button value
bg.robotTurnRightOnRightWhell=make robot turns right centered on the right whel
bg.robotTurnLeftOnLeftWhell=make robot turns left centered on the left whel
bg.robotEmitsound=make robot emits a sound
bg.robotGoForewardLeftWhell=make robot left wheel goes foreward
bg.robotGoForewardRightWhell=make robot right wheel goes foreward
bg.robotTurnLeft=make robot turns left around himself
bg.robotTurnright=make robot turns right around himself
bg.robotWriteSpeedRight=set right motor speed
bg.robotWriteSpeedLeft=set left motor speed

bg.robotSound=emit sound


bg.robotStopRight=stop right wheel
bg.robotStopLeft=stop left wheel



bg.robotTurnRight=robot turns right
bg.robotTurnLeft=robot turns left
bg.robotStepRight=robot steps to the left
bg.robotStepLeft=robot steps to the right
bg.robotAntennaRight=robot's right antenna
bg.robotAntennaLeft=robot's left antenna
bg.robotStartGreenLed=light green LED
bg.robotStartRedLed=light red LED
bg.robotStopGreenLed=stop green LED
bg.robotStopRedLed=stop red LED
bg.robotObstablePresent=obstacle present
bg.robotObstacleDistange=distance to obstacle



